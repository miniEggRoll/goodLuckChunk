// Generated by CoffeeScript 1.8.0
(function() {
  var Transform, chunk,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Transform = require('stream').Transform;

  chunk = (function(_super) {
    __extends(chunk, _super);

    function chunk() {
      chunk.__super__.constructor.apply(this, arguments);
    }

    chunk.prototype._transform = function(chunk, encoding, done) {
      switch (typeof chunk) {
        case 'Buffer':
          this.buff = new Buffer(0);
          this._transform = function(chunk, dummy, done) {
            this.buff = Buffer.concat([this.buff, chunk]);
            return done();
          };
          break;
        case 'string':
          this.buff = '';
          this._transform = function(chunk, dummy, done) {
            this.buff += chunk;
            return done();
          };
          break;
        case 'object':
          this.buff = [];
          this._transform = function(chunk, dummy, done) {
            this.buff.push(chunk);
            return done();
          };
      }
      return done();
    };

    chunk.prototype._flush = function(done) {
      this.push(this.buff);
      return done();
    };

    return chunk;

  })(Transform);

  exports.chunk = chunk;

}).call(this);
